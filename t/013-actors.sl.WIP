(include "TestSimple.sl")
(include "lib/Actor.sl")

(diag "Actor system tests")

; Test 1: Simple Counter actor
(class Counter (count)
  (init (initial)
    (set! count initial))

  (method increment ()
    (begin
      (set! count (+ count 1))
      count))

  (method decrement ()
    (begin
      (set! count (- count 1))
      count))

  (method get-value ()
    count)

  (method reset ()
    (set! count 0)))

(def c (actor/new "Counter" 10))
(is (call c :get-value) 10 "... actor counter initialized to 10")
(is (call c :increment) 11 "... actor increment returns 11")
(is (call c :increment) 12 "... actor increment returns 12")
(is (call c :decrement) 11 "... actor decrement returns 11")
(call c :reset)
(is (call c :get-value) 0 "... actor reset sets value to 0")

; Test 2: Multiple independent actors
(def c1 (actor/new "Counter" 0))
(def c2 (actor/new "Counter" 100))
(call c1 :increment)
(call c2 :increment)
(is (call c1 :get-value) 1 "... actor counter 1 is 1")
(is (call c2 :get-value) 101 "... actor counter 2 is 101")

; Test 3: BankAccount actor with conditionals
(class BankAccount (owner balance)
  (init (owner-name initial-balance)
    (begin
      (set! owner owner-name)
      (set! balance initial-balance)))

  (method deposit (amount)
    (begin
      (set! balance (+ balance amount))
      balance))

  (method withdraw (amount)
    (cond
      ((>= balance amount)
        (begin
          (set! balance (- balance amount))
          balance))
      (else
        -1)))

  (method get-balance ()
    balance)

  (method get-owner ()
    owner))

(def account (actor/new "BankAccount" "Alice" 1000))
(is (call account :get-owner) "Alice" "... actor account owner is Alice")
(is (call account :get-balance) 1000 "... actor initial balance is 1000")
(is (call account :deposit 500) 1500 "... actor deposit 500 returns 1500")
(is (call account :withdraw 200) 1300 "... actor withdraw 200 returns 1300")
(is (call account :withdraw 2000) -1 "... actor withdraw more than balance returns -1")
(is (call account :get-balance) 1300 "... actor balance unchanged after failed withdrawal")

; Test 4: Accumulator actor
(class Accumulator (total)
  (init ()
    (set! total 0))

  (method add (value)
    (begin
      (set! total (+ total value))
      total))

  (method get-total ()
    total))

(def acc (actor/new "Accumulator"))
(call acc :add 5)
(call acc :add 10)
(call acc :add 3)
(is (call acc :get-total) 18 "... actor accumulator total is 18")

; Cleanup: kill all actor processes
(process/kill c)
(process/kill c1)
(process/kill c2)
(process/kill account)
(process/kill acc)

(done)
